// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl=env("DIRECT_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  role         Role     @default(CANDIDATE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  onboardingCompleted Boolean @default(false)
  
  // Relations
  candidate Candidate?
  company   Company?
  accounts  Account[]
  sessions  Session[]

  @@map("users")
}

model Candidate {
  id                    String   @id @default(cuid())
  userId                String   @unique
  phone                 String?
  logo                  String?
  location              String?
  jobTitle              String?
  presentation          String?  // Personal presentation/bio
  salaryExpectationMin  Int?
  salaryExpectationMax  Int?
  contractTypes         Json?    // e.g., ["CDI","Freelance"]
  workHours             String?  // full-time, part-time, flexible
  competences           Json?    // e.g., [{"name":"React","level":"expert"}]
  languages             Json?    // e.g., [{"language":"English","level":"fluent"}]
  experiences           Json?    // e.g., [{"title":"Frontend Dev","company":"X","startDate":"2022-01","endDate":"2023-01"}]
  formations            Json?    // e.g., [{"degree":"Bachelor CS","school":"ABC University","startDate":"2018","endDate":"2021"}]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("candidates")
}
  
model Company {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  sector      String?
  email       String?   @unique
  phone       String?
  address     String?
  website     String?
  size        String? 
  foundedYear Int?
  description String?
  logoUrl     String?
  coverUrl    String?

  // JSON fields for related data
  values     Json?   // e.g., [{ "title": "Excellence", "description": "..." }]
  advantages Json?   // e.g., [{ "title": "Formation continue", "description": "..." }]
  photos     Json?   // e.g., [{ "imageUrl": "xxx", "caption": "..." }]
  langage    Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("companies")
}

model CompanyInvitation {
  id        String   @id @default(cuid())
  token     String   @unique @default(cuid())
  email     String   // Required email for the invitation
  used      Boolean  @default(false) // Added used field for easier querying
  createdBy String   // Admin user ID who created the invitation
  createdAt DateTime @default(now())
  expiresAt DateTime
  usedAt    DateTime?
  usedBy    String?  // User ID who used the invitation

  @@map("company_invitations")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  CANDIDATE
  COMPANY
  ADMIN
}
